#include <iostream>   
#include <vector>   
#include <algorithm>   
#include <ctime>   
#include <cstdlib>   
const int N = 9;   
void printBoard(const std::vector<std::vector<int>>& board);   
bool isSafe(const std::vector<std::vector<int>>& board, int row, int col, int num);   
bool solveSudoku(std::vector<std::vector<int>>& board);   
bool fillCell(std::vector<std::vector<int>>& board, int row, int col, int value);   
void generateNewSudoku(std::vector<std::vector<int>>& board, int numToHide);   
void playSudoku();   
int getMenuChoice();   
int main()   
{   
int choice;   
while(true)   
{   
std::cout<< "Sudoku Game Menu\n";   
std::cout << "1. Play Sudoku\n";   
std::cout<< "2. Quit\n";   
std::cout << "Enter your choice: ";   
std::cin >> choice;   
switch(choice)   
{   
case 1:   
playSudoku();   
break;   
case 2:   
std::cout<< "Exiting the game. Goodbye!\n";   
return 0;   
default:   
std::cout<< "Invalid choice. Please enter a valid option.\n";   
}   
}   
return 0;   
}   
void printBoard(const std::vector<std::vector<int>>& board)   
{   
std::cout<< "+-------------------+\n";   
for(int i=0;i<N;++i)   
{   
std::cout<< "Â¦ ";   
for(int j=0;j<N;++j)   
{   
if(board[i][j]==0)   
{   
std::cout<< ". ";   
}   
else   
{   
std::cout<<board[i][j]<< " ";   
}   
if((j+1)%3==0 && j<N-1)   
{   
std::cout<< "Â¦ ";   
}   
}   
std::cout<<std::endl;   
if((i + 1)%3==0 && i<N-1)   
{   
std::cout<< "Â¦-------------------Â¦\n";   
}   
}   
std::cout<< "+-------------------+\n";   
}   
bool isSafe(const std::vector<std::vector<int>>& board, int row, int col, int num)   
{   
for(int i=0;i<N;++i)   
{   
if(board[row][i]==num || board[i][col]==num)   
{   
return false;   
}   
}   
int startRow = row-row%3;   
int startCol = col-col%3;   
for(int i=0;i<3;++i) {   
for(int j=0;j<3;++j)   
{   
if(board[startRow+i][startCol+j]==num)   
{   
return false;   
}   
}   
}   
return true;   
}   
bool solveSudoku(std::vector<std::vector<int>>& board)   
{   
for(int row=0;row<N;++row)   
{   
for(int col=0;col<N;++col)   
{   
if(board[row][col]==0)   
{   
for(int num=1;num<=N;++num)   
{   
if(isSafe(board,row,col,num))   
{   
board[row][col]=num;   
if(solveSudoku(board))   
{   
return true;   
}   
board[row][col]=0;   
}   
}   
return false;   
}   
}   
}   
return true;   
}   
bool fillCell(std::vector<std::vector<int>>& board, int row, int col, int value)   
{   
if (row>=0 && row<N && col>=0 && col<N && board[row][col]==0 && isSafe(board,row,col,value))   
{   
board[row][col]=value;   
return true;   
}   
return false;   
}   
void generateNewSudoku(std::vector<std::vector<int>>& board,int numToHide)   
{   
std::vector<int> numbers{1, 2, 3, 4, 5, 6, 7, 8, 9};   
std::srand(std::time(0));   
std::random_shuffle(numbers.begin(), numbers.end());   
for(int i=0;i<N;++i)   
{   
board[0][i]=numbers[i];   
}   
solveSudoku(board);   
for (int i=0;i<numToHide;++i)   
{   
int row=std::rand() % N;   
int col=std::rand() % N;   
while (board[row][col]==0)   
{   
row=std::rand() % N;   
col=std::rand() % N;   
}   
board[row][col]=0;   
}   
}   
void playSudoku()   
{   
std::vector<std::vector<int>> sudokuBoard(N, std::vector<int>(N, 0));   
int mistakes=0;   
generateNewSudoku(sudokuBoard, 20);   
std::cout << "Sudoku Puzzle (some numbers hidden):\n";   
printBoard(sudokuBoard);   
int row, col, value;   
while(true)   
{   
std::cout<< "Enter row, column, and value (or -1 to show answers): ";   
std::cin>> row;   
if (row==-1)   
{   
std::vector<std::vector<int>> solutionBoard = sudokuBoard;   
if(solveSudoku(solutionBoard))   
{   
std::cout<< "\nFull Solution:\n";   
printBoard(solutionBoard);   
}   
else   
{   
std::cout<< "\nError in solving the puzzle.\n";   
}   
break;   
}   
std::cin>>col>>value;   
if (row>=1 && row<=N && col>=1 && col<=N && value>=1 && value<=9)   
{   
if (!fillCell(sudokuBoard,row - 1,col - 1,value))   
{   
std::cout<< "Invalid move. The number cannot be placed in that position.\n";   
++mistakes;   
std::cout<< "Mistakes: " << mistakes << std::endl;   
}   
else   
{   
printBoard(sudokuBoard);   
}   
}   
else   
{   
std::cout<< "Invalid input. Row, column, and value must be between 1 and 9.\n"; 
}   
}   
} 
